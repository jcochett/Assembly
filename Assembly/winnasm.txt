bits 32

global _unpack_string@12, @walk_list@8, _call_function

section .text


_unpack_string@12:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;	This function takes three params:
;
;  Param 1: A string of unsigned characters, all of which have been left
;  shifted 1 bit
;
;  Param 2: An empty, NULL-terminated character string
;
;  Param 3: A size indicating the number of bytes each string can hold.
;
;  This function simply needs to:
;	1.) Walk the first string, loading each byte
;	2.) Right-shift the value retrieved
;	3.) Store the result in the destination string
;
;	void __stdcall unpack_string(unsigned char* input, char* output, size_t length);
;
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;push ebp
    ;mov ebp, esp

	mov edi, [esp + 4]		; param 1 string of unsigned chars
	mov esi, [esp + 8]		; param 2 empty null string
	mov ecx, [esp + 12]		; param 3 the size
	

	.shiftin:
		mov al, byte [edi]
		shr al, 1
		mov byte [esi], al

		lea edi, [edi + 1]
		lea esi, [esi + 1]

	loop .shiftin

	;pop ebp

ret 12

;;;;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;


struc Node
	.Next	resd  1
	.Data	resd  1
endstruc

@walk_list@8:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;	This function takes 2 parameters:
;	
;	Param 1: A pointer to the beginning of a linked list of nodes (
;   structure definition given above), which is NULL-terminated (e.g., the
;   last Next pointer is NULL).
;
;	Param 2: A needle to search for within the list.
;
;	Walk the list, searching each Node for the needle (in Node.Data), and either:
;	1.) Return the node where you found the value
;	2.) Return NULL if the value cannot be found
;
;   Node* __fastcall walk_list(Node* start, size_t needle);
;
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

	; This is a FastCall
	; push ebp
	; mov ebp, esp

	.llsearch:
		cmp edx, [ecx + Node.Data]
		je .foundneedle
		
		mov ecx, [ecx + Node.Next] 
		cmp ecx, 0
		je .nofoundneedle

		jmp .llsearch

	.nofoundneedle:
		xor eax, eax
		jmp .endfunc

	.foundneedle:
		mov eax, ecx

	.endfunc:

	; pop ebp

ret 

;;;;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

extern _first_func@0
extern _test_func

_call_function:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	This function takes no parameters.
;
; Using the two extern'd in functions (above):
;
;	_first_func@0 -> int __stdcall first_func();
;	_test_func -> int __cdecl test_func(int);
;
;	1.) Call _first_func@0
;	2.) Take the result from the first function call,
;	and pass it as a parameter to _test_func
;	3.) Return the result.
;
;	 int __cdecl call_function();
;	
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	call _first_func@0

	push eax
	
	call _test_func
	
	add esp, 4

	ret
;;;;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;


bits 32

global _copy_string, _get_cpu_string@4, _set_flags

section .text


_copy_string:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	This method takes 3 params:
;
;	Param 1: An empty buffer
;
;	Param 2: A NULL-terminated string
;
;	Given these two inputs, 
;	1.) Find the length of the string provided in
;	param 2
;	2.) Copy the string from param 2, to the empty buffer
;	provided in param 1.
;
;	void __cdecl copy_string(char* dest, char* src);
;
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

	mov esi, [esp + 4] ; parameter 1, 
    mov edi, [esp + 8] ; parameter 2, find strlen, copy this into parm1

	mov ecx, -1
	xor eax, eax
	repne scasb			; Scans a string located as RDI for the value found in RAX/EAX/AX/AL (depending on size used), and increments the pointer
	not ecx
	dec ecx				; String length in ecx

	mov edi, [esp + 8]	; parameter 2 reborn

	rep movsb			; Copies data from ESI into EDI, and increments both pointers. REP - continue performing the action RCX times
			
	;add esp, 8 
	
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

_get_cpu_string@4:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	This function takes 1 param:
;
;	Param 1: A zero'd character buffer, containing
;	13 elements.
;
;	The following steps must be performed:
;	1.) Call CPUID and get the vendor string
;	2.) Copy from ASCII bytes returned into the buffer
;	provided.
;	
;	void __stdcall get_cpu_string(char* buf);
;
;
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;
mov eax, 0
cpuid
mov eax, ebx

mov edi, [esp + 4]

mov [edi], ebx
mov [edi + 4], edx
mov [edi + 8], ecx

ret 4
;;;;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

bits 32

global _sum_array@8, _find_largest

section .text


_sum_array@8:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	This method takes two parameters:
;
;	Param 1: A pointer to a buffer of integers (4 bytes/each).
;
;	Param 2: A number indicating the number of elements in the buffer.
;
;	You must:
;	1.) Walk through the buffer, and sum together all of the elements
;	2.) Return the result
;
;	int __stdcall sum_array(int* buffer, int size);
;
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

mov edi, [esp + 4]		; param 1
mov ecx, [esp + 8]		; param 2

xor eax, eax

.sumup:
	add eax, [edi]
	lea edi, [edi + 4]
loop .sumup

ret 8
;;;;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;


_find_largest:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	This function takes two
;	parameters:
;
;	Param 1: A pointer to a buffer of integers (4 bytes/each)
;
;	Param 2: A number indicating the number of elements in the
;	buffer.
;
;	Your task is to:
;	1.) Walk through the buffer, locating the largest element
;	2.) Return it as the result.	
;
;	int __cdecl find_largest(unsigned long* buffer, int size)
;
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

mov edi, [esp + 4] ; param 1
mov ecx, [esp + 8] ; param 2

xor eax, eax

.findit:
	cmp eax, [edi]
	jg .skipit
	mov eax, [edi]
	.skipit:	
	lea edi, [edi + 4]
		
loop .findit

ret 
;;;;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;



bits 32

global _fibonacci@4, _walk_list_map@8


section .text


_fibonacci@4:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	This method takes a single parameter:
;	
;	Param 1: The fibonacci number to calculate (e.g., "5" would indicate
;	to calculate and return the 5th fibonacci number).
;
;	int __stdcall fibonacci(int n);	
;
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

mov edi, [esp + 4]

mov ecx, 0		;was r12
mov ebx, 1		; was r13
xor eax, eax	; was r14
				; r15 edx
dec edi	

.fib:
	xor edx, edx	; zero out for t
	add edx, ecx	; add i + 0 and store in 15
	add edx, ebx	; add i + j and store in 15
	mov eax, edx	; t = i + j

	mov ecx, ebx	; i = j
	mov ebx, eax	; j = t

	dec edi	
	test edi, edi
	jnz .fib

ret 4

;;;;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;


struc Node
	.Next	resd  1
	.Data	resd  1
endstruc


_walk_list_map@8:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	This method takes two parameters:
;
;	Param 1: A pointer to the beginning of a linked list of nodes (structure
;	definition above)
;
;	Param 2: A function pointer
;
;	Your task:
;	1.) Walk the list of nodes
;	2.) For each node, call the function pointer provided
;	as parameter 2, giving it as input the Data from the node.
;
;	void __stdcall walk_list_map(Node* n, void(*)(size_t));
;
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;
;int3
  mov edx, [esp + 4]
  mov ebx, [esp + 8]

.whileloop:
	cmp edx, 0
	je .complete

	mov ecx, [edx + Node.Data]		; add 4
	
	push ecx
	call ebx		
	pop ecx

	mov edx, [edx + Node.Next]		

jmp .whileloop
.complete:


ret 8
;;;;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;

bits 32

global _first_func@8, _second_func@8, _third_func, _fourth_func@12

section .text

;;;;;;;;;;;;;;;;;;;;;;;
;  Standard Call
; Using the following
; function definition,
; add the first parameter
; to the second, and return
; the result (via eax).
;
;
; int __stdcall first_func(int v1, int v2)
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;
_first_func@8:

	xor eax, eax
	xor ebx, ebx
	mov eax, [esp + 4]
	mov ebx, [esp + 8]

	add eax, ebx

ret 8

;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;  Standard Call
; Using the following
; function definition,
; subtract the second parameter
; from the first, and return
; the result (via eax).
;
; int __stdcall second_func(int v1, int v2)
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;
_second_func@8:
	
	xor eax, eax
	xor ebx, ebx
	mov eax, [esp + 4]	; Second parameter
	mov ebx, [esp + 8]	; First parameter

	sub eax, ebx

	ret 8
;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;
;  cdecl
; Using the following
; function definition,
; given a NULL-terminated
; string, and a max value
; for length, find and return
; the string's length.
;
; size_t __cdecl third_func(char* string, size_t maxlen)
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;
_third_func:

	push ebp		; Protects the base pointer
    mov ebp, esp	; Sets up the stack frame

	xor eax, eax	; Counter
	xor ebx, ebx	; Use to grab character
	
	mov ecx, [esp + 4]	; Grab the max value
	mov edi, [esp + 8]	; Grab the string from the stack

_mystart:
	mov bl, [edi]		; read the next 8 bits from memory
	cmp bl, 0			; compare the byte to null
	je _myend			; if null, jump out of loop

	inc eax				; Keep track of length

	cmp ecx, eax		;

	lea edi, [edi + 1]
	jmp _mystart
_myend:

pop ebp

ret

;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;  Standard Call
; Give the following function
; definition, which takes:
; 1.) a pointer to a set of
; obfuscated bytes
; 2.) a pointer to a destination
; array
; 3.) a size to operate on
; XOR each obfuscated byte
; by the constant value
; 0x5f, and store the result
; in the destination.
;
; void __stdcall fourth_func(unsigned char* input, char* output, size_t len)
; BEGIN STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;
_fourth_func@12:

	mov esi, [esp + 4]
	mov edi, [esp + 8]
	mov ecx, [esp + 12]

	.continue:
		
		lodsb			; put the byte pointed to by esi into al, auto increment pointer
		xor al, 0x5f
		stosb			; puts the byte in al into the location pointed to by edi, auto increment pointer

		loop .continue

	; Original
	;mov eax, [esp + 4]	; char * input parameter
	;mov ebx, [esp + 8]	; char * output parameter
	;mov ecx, [esp + 12]	; len parameter, must be in ecx for loop to work

	;.continue:			; loop
		
	;	mov dl, [eax]	; move the character (8bits) at 'input' into 8 bit register dl
	;	xor dl, 0x5f	; xor with the value provided
	;	mov [ebx], dl	; store the xor'd character into 'output'

	;	lea eax, [eax + 1]	; Increment the pointer by 1 byte (8 bits)
	;	lea ebx, [ebx + 1]	; Increment the pointer by 1 byte (8 bits)

	;	loop .continue	; A simple macro for:  dec rcx ; test rcx,rcx ; jnz <target>

	ret 12


;;;;;;;;;;;;;;;;;;;;;;;
; END STUDENT CODE
;;;;;;;;;;;;;;;;;;;;;;;