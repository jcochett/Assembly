import os
import time
import re
from test_module import ERROR_NOT_FOUND, ERROR_INVALID

# STUDENT SECTION

#Given a directory, traverse through all sub-directories and build a dictionary with the directory as the key and a list
#of the .txt files as the value
def FileDict(dir):
    fileDict = {}
    

    for root, subdirs, files in os.walk(dir):
        filelist = [] 
        for file in files:
            if re.search(".*\.txt$", file):
                filelist.append(file)
            fileDict[root] = filelist;

    return fileDict

#Given a string, find all occurrences of badLtr and replace them with goodLtr. If you cannot find any
#of badLtr, return ERROR_NOT_FOUND. If an invalid string is passed in, return ERROR_INVALID
def ChangeLetter(inputStr, badLtr, goodLtr):
    outputStr = ''

    if not inputStr: return ERROR_INVALID

    outputStr = inputStr.replace(badLtr, goodLtr)

    if (inputStr == outputStr): return ERROR_NOT_FOUND

    return outputStr

#Given a string and a word, find the word in the sentence and reverse it. Return the corrected string if the word is
#found, or ERROR_NOT_FOUND if the word is not in the string, or ERROR_INVALID if a parameter is invalid
def ReverseWord(inputStr, revWord):
    outputStr = ''
    found = 0
    outlist = []

    if not inputStr or not revWord: return ERROR_INVALID

    wordlist = inputStr.split(" ")
    for w in wordlist:
        if w == revWord:
            found = 1
            w = w[::-1]
        outlist.append(w)
    outputStr = " ".join(outlist)

    if not found: return ERROR_NOT_FOUND

    return outputStr

#Given a string and a key, XOR each letter with the key and return the string. If a parameter is invalid, return
#ERROR_INVALID
def ObfuscateString(inputStr, key):
    outputStr = ''
    xorword = []

    if not inputStr or not key: return ERROR_INVALID

    for c in inputStr:
        xorword.append(chr(ord(c) ^ key))           
    
    outputStr = "".join(xorword)

    return outputStr

#Given two strings, combine them and return the total string. If a parameter is invalid, return ERROR_INVALID
def CombineStrings(string1, string2):
    outputStr = ''

    if not string1 or not string2: return ERROR_INVALID

    outputStr = string1 + string2

    return outputStr

#Given a string, insert the given word behind the target word. For instance, if given the sentence "insert the here",
#with the word to be inserted as "word" and the target as "the", the final string should be "insert the word here".
#If any parameter is invalid, return ERROR_INVALID
def InsertWord(inputStr, word, target):
    outputStr = ''
    found = 0

    if not inputStr or not word or not target: return ERROR_INVALID

    inputlist = inputStr.split(" ")
    wordlist = []

    for w in inputlist:
        wordlist.append(w)
        if w == target:
            found = 1
            wordlist.append("".join(word.split()))

    outputStr = " ".join(wordlist)

    if not found: return ERROR_INVALID

    return outputStr

#Given a string and a word, delete the word from the string and return the modified string. If the target word cannot
#be found, return ERROR_NOT_FOUND.
def DeleteWord(inputStr, word):
    outputStr = ''

    wordlist = []

    if not inputStr or not word: return ERROR_NOT_FOUND

    if inputStr.find(word) < 0: return ERROR_NOT_FOUND

    inputlist = inputStr.split(" ")
    for w in inputlist:
        if w != word:
            wordlist.append(w)
    outputStr = " ".join(wordlist)            

    return outputStr







#!/usr/bin/env python

import os, subprocess

"""
# Given a folder directory, build a dictionary that contains the file path as a key and files
# contained in it as the values in a list.
# example:  on the desktop, Folder1 contains two jpegs and another folder named Folder2. Folder2 has two txt files.
# The dictionary would look like 
	file_dict = {'desktop\Folder1': ['my_jpg1','my_jpg2'], 'desktop\Folder1\Folder2': ['my_txt1','my_txt2']}
"""
def first_test(folder_path):

    file_dict = {}

    for root, sub, files in os.walk(folder_path):
        file_dict[root] = files

    print file_dict

    return 

"""
# Provided a command line string (e.g., something like 'ipconfig'), execute the operation, and
# save the results to a txt file with the name given
"""
def second_test(cmdline, filename):

    output = subprocess.Popen([cmdline], stdout=subprocess.PIPE).communicate()[0]    

    f = open(filename, 'wb')
    f.write(output)
    f.close()
    return

first_test("TestFolder")
second_test("ipconfig", "outfile.txt")